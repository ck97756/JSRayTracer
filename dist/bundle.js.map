{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/RayTracer.worker.js","webpack:///./src/RMath.js","webpack:///./src/Object.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Worker","Vec3","[object Object]","arguments","length","this","x","y","z","scale","scaleToLength","Math","sqrt","multiply","dot","normalize","Vec2","floor","Object_Camera","position","lookAt","top","focus","size","canvasSize","viewDir","minus","leftVector","cross","topVector","PixelInfo","remainIterator","main_PixelData","color","iteratorCount","plus","divide","result","Uint8ClampedArray","main","canvas","canvasContext","pixelDatas","pixelCount","camera","document","getElementById","getContext","width","clientWidth","height","clientHeight","Array","pixelInfos","pixelIndex","pow","addEventListener","event","console","log","offsetX","offsetY","imageData","getImageData","data","nextThreadCount","threadCount","window","getProgress","totalIterator","info","setThreadCount","worker","RayTracer_worker_default","a","onmessage","type","pixelData","addColor","putImageData","ImageData","getPixel","arrangeTile","postMessage","cameraSize","workers","push","ceil","startTime","performance","now","terminate","splice","indexOf","time","outStr","millisecond","second","minute","hour","num","unit","startFrom","printMillisecond","currentPixelIndex","random","currentPixel","rangeStart","rangeEnd","currentTileX"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"worker.js\");\n};","export class Vec3 {\r\n\tconstructor() {\r\n\t\tif (arguments.length === 1 && arguments[0] instanceof Vec3) {\r\n\t\t\tthis.x = arguments[0].x;\r\n\t\t\tthis.y = arguments[0].y;\r\n\t\t\tthis.z = arguments[0].z;\r\n\t\t} else if (arguments.length === 3) {\r\n\t\t\tthis.x = arguments[0];\r\n\t\t\tthis.y = arguments[1];\r\n\t\t\tthis.z = arguments[2];\r\n\t\t} else {\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tplus(r) {\r\n\t\treturn new Vec3(\r\n\t\t\tthis.x + r.x\r\n\t\t\t, this.y + r.y\r\n\t\t\t, this.z + r.z\r\n\t\t);\r\n\t}\r\n\r\n\tminus(r) {\r\n\t\treturn new Vec3(\r\n\t\t\tthis.x - r.x\r\n\t\t\t, this.y - r.y\r\n\t\t\t, this.z - r.z\r\n\t\t);\r\n\t}\r\n\r\n\tmultiply(r) {\r\n\t\treturn new Vec3(\r\n\t\t\tthis.x * r\r\n\t\t\t, this.y * r\r\n\t\t\t, this.z * r\r\n\t\t);\r\n\t}\r\n\r\n\tscaleToLength(l) {\r\n\t\tlet length = this.length();\r\n\t\tlet scale = l / length;\r\n\t\treturn new Vec3(\r\n\t\t\tthis.x * scale\r\n\t\t\t, this.y * scale\r\n\t\t\t, this.z * scale\r\n\t\t);\r\n\t}\r\n\r\n\tnormalize() {\r\n\t\treturn this.scaleToLength(1);\r\n\t}\r\n\r\n\tcross(r) {\r\n\t\treturn new Vec3(\r\n\t\t\tthis.y * r.z - this.z * r.y\r\n\t\t\t, this.z * r.x - this.x * r.z\r\n\t\t\t, this.x * r.y - this.y * r.x\r\n\t\t);\r\n\t}\r\n\r\n\tlength() {\r\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n\t}\r\n\r\n\tdot(r) {\r\n\t\treturn this.x * r.x + this.y * r.y + this.z * r.z;\r\n\t}\r\n\r\n\tnegative() {\r\n\t\treturn new Vec3(\r\n\t\t\t-this.x\r\n\t\t\t, -this.y\r\n\t\t\t, -this.z\r\n\t\t);\r\n\t}\r\n\r\n\tmultiplyByVec3(r) {\r\n\t\treturn new Vec3(\r\n\t\t\tthis.x * r.x\r\n\t\t\t, this.y * r.y\r\n\t\t\t, this.z * r.z\r\n\t\t);\r\n\t}\r\n\r\n\tdivide(r) {\r\n\t\treturn new Vec3(\r\n\t\t\tthis.x / r\r\n\t\t\t, this.y / r\r\n\t\t\t, this.z / r\r\n\t\t);\r\n\t}\r\n\r\n\tprojectOnto(r) {\r\n\t\treturn r.multiply(this.dot(r.normalize()));\r\n\t}\r\n\r\n\tprojectLength(r) {\r\n\t\treturn this.dot(r.normalize());\r\n\t}\r\n}\r\n\r\nexport class Vec2 {\r\n\tconstructor() {\r\n\t\tif (arguments.length === 1 && arguments[0] instanceof Vec2) {\r\n\t\t\tthis.x = arguments[0].x;\r\n\t\t\tthis.y = arguments[0].y;\r\n\t\t} else if (arguments.length === 2) {\r\n\t\t\tthis.x = arguments[0];\r\n\t\t\tthis.y = arguments[1];\r\n\t\t} else {\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tdivide(r) {\r\n\t\treturn new Vec2(this.x / r, this.y / r);\r\n\t}\r\n\r\n\tdivideByVec2(r) {\r\n\t\treturn new Vec2(this.x / r.x, this.y / r.y);\r\n\t}\r\n\r\n\tmultiplyByVec2(r) {\r\n\t\treturn new Vec2(this.x * r.x, this.y * r.y);\r\n\t}\r\n\r\n\tfloor() {\r\n\t\treturn new Vec2(Math.floor(this.x), Math.floor(this.y));\r\n\t}\r\n\r\n\tlength() {\r\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\r\n\t}\r\n}\r\n\r\nexport class Quaternion {\r\n\tconstructor(w, x, y, z) {\r\n\t\tthis.w = w;\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t}\r\n}","import { Vec3, Vec2 } from \"./RMath\";\r\nimport { isDebugging } from './debug';\r\nimport { generateRays, diffuseBRDF, reflectionBRDF, Material } from \"./Shading\";\r\n\r\nexport class Sphere {\r\n\tconstructor() {\r\n\t\tif (arguments.length >= 2) {\r\n\t\t\tif (arguments[0] instanceof Vec3) {\r\n\t\t\t\tthis.position = new Vec3(arguments[0]);\r\n\t\t\t} else {\r\n\t\t\t\tthrow 'The first argument of constructor of Sphere must be type of Vec3';\r\n\t\t\t}\r\n\t\t\tif (typeof arguments[1] === 'number' && arguments[1] >= 0) {\r\n\t\t\t\tthis.radius = arguments[1];\r\n\t\t\t} else {\r\n\t\t\t\tthrow 'The second argument of constructor of Sphere must be a nonnegative number';\r\n\t\t\t}\r\n\t\t\tif (arguments.length > 2) {\r\n\t\t\t\tif (arguments[2] instanceof Material) {\r\n\t\t\t\t\tthis.material = arguments[2];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow 'The third argument of constructor of Sphere must be type of Material';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.material = new Material(diffuseBRDF);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.position = new Vec3();\r\n\t\t\tthis.radius = 1.0;\r\n\t\t\tthis.material = new Material(diffuseBRDF);\r\n\t\t}\r\n\t}\r\n\r\n\t* getCollision(ray) {\r\n\t\tlet rayToCenter = ray.startPosition.minus(this.position);\r\n\t\tlet a = ray.direction.dot(ray.direction);\r\n\t\tlet b = 2 * ray.direction.dot(rayToCenter);\r\n\t\tlet c = rayToCenter.dot(rayToCenter) - this.radius * this.radius;\r\n\t\tconst threshold = 1e-5;\r\n\t\t// b^2 - 4ac;\r\n\t\tlet d = b * b - 4 * a * c;\r\n\t\tlet l;\r\n\t\tif (d < 0) {\r\n\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t} else if (d === 0) {\r\n\t\t\tlet root = -b / (2 * a);\r\n\t\t\tif (root > 0) {\r\n\t\t\t\tl = root;\r\n\t\t\t\tif (l < threshold) {\r\n\t\t\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tyield l;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet squrD = Math.sqrt(d);\r\n\t\t\tlet root = -b - squrD;\r\n\t\t\tif (root > 0) {\r\n\t\t\t\tl = root / (2 * a);\r\n\t\t\t\tif (l < threshold) {\r\n\t\t\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tyield l;\r\n\t\t\t\t}\r\n\t\t\t} else if ((root = -b + squrD) > 0) {\r\n\t\t\t\tl = root / (2 * a);\r\n\t\t\t\tif (l < threshold) {\r\n\t\t\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tyield l;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet collisionPosition = ray.startPosition.plus(ray.direction.multiply(l));\r\n\t\tlet normal = collisionPosition.minus(this.position).normalize();\r\n\t\tlet newRays = generateRays(ray, collisionPosition, normal, this.material, 1);\r\n\t\tyield newRays;\r\n\t\tif (newRays === null) {\r\n\t\t\tyield this.material.baseColor;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class Plane {\r\n\tconstructor(position, firstVec, secondVec, material) {\r\n\t\tthis.position = new Vec3(position);\r\n\t\tthis.firstVec = new Vec3(firstVec);\r\n\t\tthis.secondVec = new Vec3(secondVec);\r\n\t\tthis.normal = this.firstVec.cross(this.secondVec).normalize();\r\n\t\tthis.material = material;\r\n\t}\r\n\r\n\t*getCollision(ray) {\r\n\t\tconst threshold = 1e-5;\r\n\r\n\t\tlet h = ray.direction.cross(this.secondVec);\r\n\t\tlet a = this.firstVec.dot(h);\r\n\t\tif (a > -threshold && a < threshold) {\r\n\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t}\r\n\r\n\t\tlet f = 1 / a;\r\n\t\tlet s = ray.startPosition.minus(this.position);\r\n\t\tlet u = f * s.dot(h);\r\n\r\n\t\tif (u < 0 || u > 1) {\r\n\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t}\r\n\r\n\t\tlet q = s.cross(this.firstVec);\r\n\t\tlet v = f * ray.direction.dot(q);\r\n\t\tif (v < 0 || v > 1) {\r\n\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t}\r\n\r\n\t\tlet t = f * this.secondVec.dot(q);\r\n\t\tif (t > threshold) {\r\n\t\t\tyield t;\r\n\t\t} else {\r\n\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t}\r\n\r\n\t\tlet normal = this.normal;\r\n\t\tif (normal.dot(ray.direction) > 0) {\r\n\t\t\tnormal = normal.negative();\r\n\t\t}\r\n\t\tlet collisionPosition = ray.startPosition.plus(ray.direction.multiply(t));\r\n\t\tlet newRays = generateRays(ray, collisionPosition, normal, this.material, 1);\r\n\t\tyield newRays;\r\n\t\tif (newRays === null) {\r\n\t\t\tyield this.material.baseColor;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class DirectionalLight {\r\n\tconstructor(direction, color) {\r\n\t\tthis.direction = direction.normalize();\r\n\t\tthis.color = new Vec3(color);\r\n\t}\r\n\r\n\t* getCollision(ray) {\r\n\t\tif (ray.iterationCounter > 0 && this.direction.negative().dot(ray.direction) > 0) {\r\n\t\t\tyield 1e9;\r\n\t\t\tyield null;\r\n\t\t\tyield this.color;\r\n\t\t} else {\r\n\t\t\tyield Number.POSITIVE_INFINITY;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class Camera {\r\n\tconstructor() {\r\n\t\tthis.position = new Vec3();\r\n\t\tthis.lookAt = new Vec3();\r\n\t\tthis.top = new Vec3(0, 0, 1);\r\n\t\tthis.focus = 0;\r\n\t\tthis.size = new Vec2();\r\n\t\tthis.canvasSize = new Vec2();\r\n\t}\r\n\r\n\tsetView(position, lookAt, top) {\r\n\t\tthis.position = new Vec3(position);\r\n\t\tthis.lookAt = new Vec3(lookAt);\r\n\t\tthis.top = new Vec3(top);\r\n\r\n\t\tlet viewDir = this.lookAt.minus(this.position);\r\n\t\tthis.leftVector = this.top.cross(viewDir).normalize();\r\n\t\tthis.topVector = viewDir.cross(this.leftVector).normalize();\r\n\t}\r\n}","import { Camera } from './Object';\r\nimport { Vec2, Vec3 } from './RMath';\r\n\r\nimport RenderWorker from './RayTracer.worker.js';\r\n\r\nclass PixelInfo {\r\n\tconstructor(x, y, remainIterator) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.remainIterator = remainIterator;\r\n\t}\r\n}\r\n\r\nclass PixelData {\r\n\tconstructor() {\r\n\t\tthis.color = new Vec3();\r\n\t\tthis.iteratorCount = 0;\r\n\t}\r\n\r\n\taddColor(color) {\r\n\t\tthis.color = this.color.plus(color);\r\n\t\tthis.iteratorCount++;\r\n\t}\r\n\r\n\tgetPixel() {\r\n\t\tlet color = this.color.divide(this.iteratorCount);\r\n\t\tlet result = new Uint8ClampedArray(4);\r\n\t\tresult[0] = color.x * 255;\r\n\t\tresult[1] = color.y * 255;\r\n\t\tresult[2] = color.z * 255;\r\n\t\tresult[3] = 255;\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\n// console.log(RenderWorker);\r\nfunction main() {\r\n\tlet camera = new Camera();\r\n\tlet canvas;\r\n\tlet canvasContext;\r\n\tlet pixelDatas;\r\n\tlet pixelCount;\r\n\t//Setup canvas\r\n\tcanvas = document.getElementById('canvas');\r\n\tcanvasContext = canvas.getContext('2d');\r\n\tcanvas.width = canvas.clientWidth;\r\n\tcanvas.height = canvas.clientHeight;\r\n\tcamera.size = new Vec2(10, 10 * canvas.height / canvas.width);\r\n\tcamera.canvasSize = new Vec2(canvas.width, canvas.height);\r\n\tpixelCount = canvas.width * canvas.height;\r\n\r\n\tpixelDatas = new Array(pixelCount);\r\n\r\n\tlet pixelInfos = new Array(pixelCount);\r\n\tlet pixelIndex = 0;\r\n\tlet iteratorCount = Math.pow(2, 12);\r\n\tfor (let x = 0; x < canvas.width; x++) {\r\n\t\tfor (let y = 0; y < canvas.height; y++) {\r\n\t\t\tpixelInfos[pixelIndex] = new PixelInfo(x, y, iteratorCount);\r\n\t\t\tpixelDatas[pixelIndex] = new PixelData();\r\n\t\t\tpixelIndex++;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tcanvas.addEventListener('click', (event) => {\r\n\t\tconsole.log(`position: ${event.offsetX}, ${event.offsetY}`);\r\n\t\tlet imageData = canvasContext.getImageData(event.offsetX, event.offsetY, 1, 1);\r\n\t\tconsole.log(`color: ${imageData.data[0]}, ${imageData.data[1]}, ${imageData.data[2]}`);\r\n\t});\r\n\r\n\t//Setup worker\r\n\tlet nextThreadCount = 1;\r\n\tlet threadCount = nextThreadCount;\r\n\twindow.getProgress = () => {\r\n\t\tlet totalIterator = iteratorCount * canvas.width * canvas.height;\r\n\t\tlet remainIterator = 0;\r\n\t\tfor (let info of pixelInfos) {\r\n\t\t\tremainIterator += info.remainIterator;\r\n\t\t}\r\n\t\treturn 1 - (remainIterator / totalIterator);\r\n\t}\r\n\r\n\twindow.setThreadCount = function (value) {\r\n\t\tnextThreadCount = value;\r\n\t\tfor (; threadCount < nextThreadCount; threadCount++) {\r\n\t\t\tlet worker = new RenderWorker();\r\n\t\t\tworker.onmessage = (event) => {\r\n\t\t\t\tlet eventType = event.data.type;\r\n\t\t\t\tif (eventType === 'doneRender') {\r\n\t\t\t\t\tlet x = event.data.x;\r\n\t\t\t\t\tlet y = event.data.y;\r\n\t\t\t\t\tlet pixelIndex = y * canvas.width + x;\r\n\t\t\t\t\tlet color = new Vec3(...event.data.data);\r\n\t\t\t\t\tlet pixelData = pixelDatas[pixelIndex];\r\n\t\t\t\t\tpixelData.addColor(color);\r\n\t\t\t\t\tcanvasContext.putImageData(new ImageData(pixelData.getPixel(), 1, 1), x, y);\r\n\t\t\t\t\tarrangeTile(worker);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tworker.postMessage({\r\n\t\t\t\ttype: 'initial'\r\n\t\t\t\t, cameraSize: new Vec2(10, 10 * canvas.height / canvas.width)\r\n\t\t\t\t, canvasSize: new Vec2(canvas.width, canvas.height)\r\n\t\t\t});\r\n\t\t\tarrangeTile(worker);\r\n\t\t\tworkers.push(worker);\r\n\t\t}\r\n\t}\r\n\tlet tileSize = 20;\r\n\tlet tileCount = new Vec2(Math.ceil(camera.canvasSize.x / tileSize), Math.ceil(camera.canvasSize.y / tileSize));\r\n\tlet workers = [];\r\n\r\n\tlet currentTileX = 0;\r\n\tlet currentTileY = 0;\r\n\r\n\tlet startTime = performance.now();\r\n\r\n\tfor (let t = 0; t < threadCount; t++) {\r\n\t\tlet worker = new RenderWorker();\r\n\r\n\t\tworker.onmessage = (event) => {\r\n\t\t\tlet eventType = event.data.type;\r\n\t\t\tif (eventType === 'doneRender') {\r\n\t\t\t\tlet x = event.data.x;\r\n\t\t\t\tlet y = event.data.y;\r\n\t\t\t\tlet pixelIndex = y * canvas.width + x;\r\n\t\t\t\tlet color = new Vec3(...event.data.data);\r\n\t\t\t\tlet pixelData = pixelDatas[pixelIndex];\r\n\t\t\t\tpixelData.addColor(color);\r\n\t\t\t\tcanvasContext.putImageData(new ImageData(pixelData.getPixel(), 1, 1), x, y);\r\n\t\t\t\tarrangeTile(worker);\r\n\t\t\t}\r\n\t\t};;\r\n\r\n\t\tworker.postMessage({\r\n\t\t\ttype: 'initial'\r\n\t\t\t, cameraSize: new Vec2(10, 10 * canvas.height / canvas.width)\r\n\t\t\t, canvasSize: new Vec2(canvas.width, canvas.height)\r\n\t\t});\r\n\r\n\t\tarrangeTile(worker);\r\n\r\n\t\tworkers.push(worker);\r\n\t}\r\n\r\n\tfunction arrangeTile(worker) {\r\n\t\tif (nextThreadCount < threadCount) {\r\n\t\t\tworker.terminate();\r\n\t\t\tworkers.splice(workers.indexOf(worker), 1);\r\n\t\t\tthreadCount--;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (pixelCount <= 0) {\r\n\t\t\tlet endTime = performance.now();\r\n\t\t\tlet timeDiff = endTime - startTime;\r\n\t\t\tprintMillisecond(timeDiff);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet currentPixelIndex = Math.floor(Math.random() * pixelCount);\r\n\t\tlet currentPixel = pixelInfos[currentPixelIndex];\r\n\t\tcurrentPixel.remainIterator--;\r\n\t\tif (currentPixel.remainIterator <= 0) {\r\n\t\t\tpixelInfos.splice(currentPixelIndex, 1);\r\n\t\t\tpixelCount--;\r\n\t\t}\r\n\r\n\t\tworker.postMessage({\r\n\t\t\ttype: 'renderRange'\r\n\t\t\t, rangeStart: new Vec2(currentPixel.x, currentPixel.y)\r\n\t\t\t, rangeEnd: new Vec2(currentPixel.x + 1, currentPixel.y + 1)\r\n\t\t});\r\n\r\n\t\tcurrentTileX++;\r\n\t}\r\n}\r\n\r\nfunction printMillisecond(time) {\r\n\tlet outStr = '';\r\n\tlet millisecond = time % 1000;\r\n\tlet second = Math.floor(time / 1000);\r\n\tlet minute = Math.floor(second / 60);\r\n\tlet hour = Math.floor(minute / 60);\r\n\tlet day = Math.floor(hour / 24);\r\n\r\n\tsecond = second % 60;\r\n\tminute = minute % 60;\r\n\thour = hour % 24;\r\n\r\n\tlet num = [day, hour, minute, second];\r\n\tconst unit = ['day', 'hour', 'minute', 'second'];\r\n\r\n\tlet startFrom = 0;\r\n\tfor (; startFrom < num.length; startFrom++) {\r\n\t\tif (num[startFrom] > 0) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tfor (; startFrom < num.length; startFrom++) {\r\n\t\tif (num[startFrom] > 1) {\r\n\t\t\toutStr = `${outStr}${num[startFrom]} ${unit[startFrom]}s `;\r\n\t\t} else {\r\n\t\t\toutStr = `${outStr}${num[startFrom]} ${unit[startFrom]} `;\r\n\t\t}\r\n\t}\r\n\tif (millisecond > 1) {\r\n\t\toutStr = `${outStr}${millisecond} milliseconds`;\r\n\t} else {\r\n\t\toutStr = `${outStr}${millisecond} millisecond`;\r\n\t}\r\n\r\n\tconsole.log(outStr);\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\tmain();\r\n}, false);"],"sourceRoot":""}